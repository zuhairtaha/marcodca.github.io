{"version":3,"sources":["../../src/database/database.js"],"names":["config","JSON","parse","fs","readFileSync","__dirname","host","user","password","port","database","connection","mysql","createConnection","getAllTasks","connect","console","log","Promise","resolve","reject","query","error","result","addTask","title","description","created","updated","dueDate","statusID","userID","changeTaskTitle","taskID","newTitle","changeTaskDueDate","newDueDate","changeTaskStatus","newStatus","markTaskAsCompleted","deleteTask","deleteUser"],"mappings":"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","file":"database.js","sourcesContent":["import fs from 'fs';\r\nimport mysql from 'mysql';\r\n\r\nconst config = JSON.parse(fs.readFileSync(__dirname + '/config-secret.json'));\r\n\r\nconst { host, user, password, port, database } = config;\r\n\r\nconst connection = mysql.createConnection({\r\n    host,\r\n    user,\r\n    password,\r\n    port,\r\n    database\r\n});\r\n\r\n//A method to get all the rows in the task table\r\n\r\n\r\n\r\nconnection.getAllTasks = function () {\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    })\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.query('SELECT * FROM task', (error, result) => {\r\n            if (error) reject(error)\r\n            resolve(result)\r\n        })\r\n    })\r\n\r\n}\r\n\r\n//A method to add a new task\r\nconnection.addTask = function (title, description, created, updated, dueDate, statusID, userID) {\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        this.query('INSERT INTO task (title, description, created, updated, due_date, status_id, user_id) VALUES(?,?,?,?,?,?,?)', [title, description, created, updated, dueDate, statusID, userID], (error, result) => {\r\n            if (error) reject(error)\r\n            resolve(result)\r\n        })\r\n    })\r\n}\r\n\r\n//A method for updating a task title\r\nconnection.changeTaskTitle = function (taskID, newTitle) {\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        this.query('UPDATE task SET title = ? WHERE id = ?;', [newTitle, taskID], (error, result) => {\r\n            if (error) reject(error)\r\n            resolve(result)\r\n        }\r\n        )\r\n    })\r\n}\r\n\r\n//A method for changing the due date of a task.\r\nconnection.changeTaskDueDate = function(taskID, newDueDate) {\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n\r\n    return new Promise((resolve, reject)=>{\r\n        console.log(newDueDate, 'and id', taskID);\r\n        \r\n        this.query('UPDATE task SET due_date = ? WHERE id = ? ;', [newDueDate, taskID], (error, result)=>{\r\n            if (error) reject(error)\r\n            resolve(result)\r\n        })\r\n    })\r\n}\r\n\r\n//A method for changing the status code of a task\r\nconnection.changeTaskStatus = function(taskID, newStatus) {\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n\r\n    return new Promise((resolve, reject)=>{\r\n        this.query('UPDATE task SET status_id = ? WHERE task.id = ?; ', [newStatus, taskID], (error, result)=>{\r\n            if (error) reject(error)\r\n            resolve(result)\r\n        })\r\n    })\r\n};\r\n\r\n//A method for marking a task as completed\r\nconnection.markTaskAsCompleted = function(taskID) {\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n\r\n    return new Promise((resolve, reject)=>{\r\n        this.query('UPDATE task SET status_id = 3 WHERE task.id = ?; ', [taskID], (error, result)=>{\r\n            if (error) reject(error)\r\n            resolve(result)\r\n        })\r\n    })\r\n}\r\n\r\n//A method for deleting a task\r\nconnection.deleteTask = function(taskID){\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n\r\n    return new Promise((resolve, reject)=>{\r\n        this.query('DELETE FROM task WHERE task.id = ?',[taskID], (error, result)=>{\r\n            if (error) reject(error)\r\n            resolve(result);\r\n        })\r\n    })\r\n}\r\n\r\n//A method for deleting an user\r\nconnection.deleteUser = function(userID){\r\n    this.connect(() => {\r\n        console.log('Connected to database');\r\n    });\r\n\r\n    return new Promise((resolve, reject)=>{\r\n        this.query('DELETE FROM user WHERE user.id = ?',[userID], (error, result)=>{\r\n            if (error) reject(error)\r\n            resolve(result);\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default connection"]}